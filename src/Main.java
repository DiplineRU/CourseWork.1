public class Main {

    public static Employee[] Employee = new Employee[10];
    public static void printInfoAboutEmployee() {
        System.out.println("Cписок всех сотрудников со всеми имеющимися по ним данными");
        for (int i = 0; i < Employee.length; i++) {
            System.out.println(Employee[i]);
        }
    }

    public static int printInfoAboutSalaryForOneMonth() {
        int salary = 0;
        for (int i = 0; i < Employee.length; i++) {
            salary += Employee[i].getSalary();
        }
        return salary;
    }

    public static Employee findEmployeeWithMinimumSalary(Employee[] employees) {
        Employee minSalaryEmployee = employees[0];
        for (int i = 1; i < employees.length; i++) {
            if (employees[i].getSalary() < minSalaryEmployee.getSalary()) {
                minSalaryEmployee = employees[i];
            }
        }
        System.out.println(minSalaryEmployee + " Сотрудник с мин ЗП");
        return minSalaryEmployee;
    }
    public static Employee findEmployeeWithMaximumSalary(Employee[] employees) {
        Employee maxSalaryEmployee = employees[0];
        for (int i = 1; i < employees.length; i++) {
            if (employees[i].getSalary() > maxSalaryEmployee.getSalary()) {
                maxSalaryEmployee = employees[i];
            }
        }
        System.out.println(maxSalaryEmployee+" Сотрудник с макс ЗП");
        return maxSalaryEmployee;
    }
    public static double calculateAverageSalary(Employee[] employees) {
        double totalSalary = printInfoAboutSalaryForOneMonth();
        return totalSalary / Employee.length;
    }
    public static void printFullNames(Employee[] employees) {
        for (Employee employee : employees) {
            System.out.println(employee.getName() + " " + employee.getSurname() + " " + employee.getPatronymic());
        }
    }

        public static void main (String[]args){

            Employee[0] = new Employee("Иван", "Иванов", "Иванович", 30_000, 1);
            Employee[1] = new Employee("Александр", "Александров", "Александрович", 45_000, 2);
            Employee[2] = new Employee("Гулян", "Артем", "Сергеевич", 115_000, 3);
            Employee[3] = new Employee("Петров", "Павел", "Павелович", 75_000, 4);
            Employee[4] = new Employee("Питерова", "Мария", "Сергеевна", 63_000, 5);
            Employee[5] = new Employee("Колопов", "Сергей", "Игоревич", 88_000, 1);
            Employee[6] = new Employee("Чудинова", "Мария", "Сергеевна", 38_000, 3);
            Employee[7] = new Employee("Елисеева", "Мария", "Олеговна", 59_000, 4);
            Employee[8] = new Employee("Сафаров", "Константин", "Сергеевич", 73_000, 5);
            Employee[9] = new Employee("Полугаров", "Владислав", "Игоревич", 120_000, 1);

            printInfoAboutEmployee();
            System.out.println("Сумма затрат на зарплаты в месяц.");
            System.out.println(printInfoAboutSalaryForOneMonth() + " rub. Затрат на зарплаты в месяц");
            Employee minSalaryEmployee = findEmployeeWithMinimumSalary(Employee);
            Employee maxSalaryEmployee = findEmployeeWithMaximumSalary(Employee);
            printFullNames(Employee);




            /**Описание задачи:
             Напишите программу, которая занимается учетом сотрудников и помогает кадрам и бухгалтерии автоматизировать процессы.
             С помощью вашей программы бухгалтерия и отдел кадров смогут узнавать следующую информацию:

             1. Получить список всех сотрудников.
             2. Посчитать сумму затрат на зарплаты.
             3. Найти сотрудника с минимальной заплатой.
             4. Найти сотрудника с максимальной зарплатой.
             5. Подсчитать среднее значение зарплат.

             Далее описаны пункты, которые нужно реализовать, чтобы сделать задание. Обратите внимание, что у задания три
             уровня сложности в зависимости от проработки вашей программы: необходимо сделать базовые пункты, задачи с
             повышенной сложностью и очень сложные — по желанию.

             - **Базовая сложность**
             1. Создать класс Employee, который содержит информацию о Ф.И.О., отделе и зарплате сотрудника. Отделы для простоты должны быть названы от 1 до 5.
             2. Добавить статическую переменную-счетчик, которая будет отвечать за id.
             3. Добавить в класс Employee поле id, которое проставляется из счетчика, а затем счетчик увеличивает свое значение.
             4. Добавить возможность получать значения полей из Employee (геттеры) для всех полей.
             5. Добавить возможность устанавливать значения полей отдела и зарплаты (сеттеры).
             6. По умолчанию все поля должны передавать через конструктор (кроме id) и заполняться в нем (включая id, который нужно получить из счетчика).
             7. Создать внутри класса с методом main поле типа Employee[10], которое будет выполнять роль «хранилища» для записей о сотрудниках.
             8. Создать статические методы, которые будут взаимодействовать с массивом и предоставлять результат:
             a. Получить список всех сотрудников со всеми имеющимися по ним данными (вывести в консоль значения всех полей (toString)).
             b. Посчитать сумму затрат на зарплаты в месяц.
             c. Найти сотрудника с минимальной зарплатой.
             d. Найти сотрудника с максимальной зарплатой.
             e. Подсчитать среднее значение зарплат (можно использовать для этого метод из пункта b).
             f. Получить Ф. И. О. всех сотрудников (вывести в консоль).

             - **Повышенная сложность**
             Создать дополнительные статические методы для решения следующих задач.
             1. Проиндексировать зарплату (вызвать изменение зарплат у всех сотрудников на величину аргумента в %).
             2. Получить в качестве параметра номер отдела (1–5) и найти (всего 6 методов):
             a. Сотрудника с минимальной зарплатой.
             b. Сотрудника с максимальной зарплатой.
             c. Сумму затрат на зарплату по отделу.
             d. Среднюю зарплату по отделу (учесть, что количество людей в отделе отличается от employees.length).
             e. Проиндексировать зарплату всех сотрудников отдела на процент, который приходит в качестве параметра.
             f. Напечатать всех сотрудников отдела (все данные, кроме отдела).
             3. Получить в качестве параметра число и найти:
             a. Всех сотрудников с зарплатой меньше числа (вывести id, Ф. И. О. и зарплатой в консоль).
             b. Всех сотрудников с зарплатой больше (или равно) числа (вывести id, Ф. И. О. и зарплатой в консоль).


             - **Очень сложно**
             Привести структуру проекта к ООП.
             1. Создать класс EmployeeBook.
             2. Перенести хранилище сотрудников в него (массив), закрыть к нему доступ извне (сделать приватным).
             3. Все статические методы по работе с массивом перенести в этот класс и сделать нестатическими.
             4. Добавить несколько новых методов:
             a. Добавить нового сотрудника (создаем объект, заполняем поля, кладем в массив).
             Нужно найти свободную ячейку в массиве и добавить нового сотрудника в нее. Искать нужно всегда с начала, так как возможно добавление в ячейку удаленных ранее сотрудников.
             b. Удалить сотрудника (находим сотрудника по Ф. И. О. и/или id, обнуляем его ячейку в массиве).
             5. Изменить сотрудника (получить сотрудника по Ф. И. О., модернизировать его запись):
             a. Изменить зарплату.
             b. Изменить отдел.
             Придумать архитектуру. Сделать или два метода, или один, но продумать его.
             6. Получить Ф. И. О. всех сотрудников по отделам (напечатать список отделов и их сотрудников).*/
        }
    }